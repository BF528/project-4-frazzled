#Project 4
#Programmer
#Processing UMI Count Matrix - using bioconductor package: Seurat

#install.packages("Seurat")
library(Seurat)
#citation("Seurat")

#if (!requireNamespace("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
BiocManager::install("tximport")
library(tximport)
#citation('tximport')

#install.packages('SeqGSEA')
#if (!requireNamespace("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")

BiocManager::install("SeqGSEA")

library(SeqGSEA)
#citation('SeqGSEA')

library(biomaRt)
#citation('biomart')

#load salmon alevin count files into R
files <- file.path("/projectnb/bf528/users/frazzled/project_4/Data_curator/salmon/salmon_output/alevin/quants_mat.gz")
file.exists(files)
txfiles <- tximport(files, type="alevin")
unfiltered_count <- txfiles$counts


ensembl <- useMart("ensembl", 
                   dataset = "hsapiens_gene_ensembl")
pbmc_filter <- pbmc@assays
attr <- c("ensembl_gene_id", "hgnc_symbol")
Info <- getBM(attributes = attr,
              filters = "hgnc_symbol",
              values = pbmc_filter,
              mart = ensembl)


#initialize seurat object
pbmc <- CreateSeuratObject(counts = txfiles$counts , min.cells = 3, min.features = 200, project = "10X_PBMC")

pbmc

ensembl = useEnsembl(biomart = "ensembl", dataset = "hsapiens_gene_ensembl", mirror = "www", verbose = FALSE)
#adding gene names
genes <- substr(pbmc@assays$RNA@counts@Dimnames[[1]], start = 1, stop = 15)
conversion <- convertEnsembl2Symbol(genes)
genes <- conversion$hgnc_symbol
genes <- pbmc@assays$RNA@counts@Dimnames[[1]]
genes <- pbmc@assays$RNA@data@Dimnames[[1]] 

pbmc


pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
head(pbmc@meta.data, 5)

VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)

#filtering 
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)

pbmc

#normalize data 
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)

pbmc[["RNA"]]@meta.features <- data.frame(row.names = rownames(pbmc[["RNA"]]))

#find variable features 
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)

top10 <- head(VariableFeatures(pbmc), 10)
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)


#scale data 
#all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc)

#perform PCA on scaled data 
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))

#view PCA results
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)

#determine dimensionality of sample set
#resampling test
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
JackStrawPlot(pbmc, dims = 1:15)
ElbowPlot(pbmc)

#cluster the cells 
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)

#view cluster ids first 5 cells 
head(Idents(pbmc), 5)
pbmc




saveRDS(pbmc, file = "/projectnb/bf528/users/frazzled/project_4/programmer/pbmc_seurat.rds")


pbmc <- RunUMAP(pbmc, dims = 1:10)
DimPlot(pbmc, reduction = "umap")